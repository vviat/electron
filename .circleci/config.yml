# Build machines configs.
docker-image: &docker-image
  docker:
    - image: electronbuilds/electron:0.0.8

machine-linux-medium: &machine-linux-medium
  <<: *docker-image
  resource_class: medium

machine-linux-2xlarge: &machine-linux-2xlarge
  <<: *docker-image
  resource_class: 2xlarge

machine-mac: &machine-mac
  macos:
    xcode: "8.3.3"

# Build configurations options.
env-debug-build: &env-debug-build
  GN_CONFIG: //electron/build/args/debug.gn

env-testing-build: &env-testing-build
  GN_CONFIG: //electron/build/args/testing.gn

env-release-build: &env-release-build
  GN_CONFIG: //electron/build/args/release.gn
  NOTIFY_SLACK: true

env-browsertests: &env-browsertests
  BUILD_TARGET: electron:chromium_browsertests
  TESTS_CONFIG: src/electron/script/browsertests.yml

env-unittests: &env-unittests
  BUILD_TARGET: electron:chromium_unittests
  TESTS_CONFIG: src/electron/script/unittests.yml

# Build targets options.
env-ia32: &env-ia32
  GN_EXTRA_ARGS: 'target_cpu = "x86"'
  NPM_CONFIG_ARCH: ia32

env-arm: &env-arm
  GCLIENT_EXTRA_ARGS: '--custom-var=checkout_arm=True'
  GN_EXTRA_ARGS: 'target_cpu = "arm"'
  MKSNAPSHOT_TOOLCHAIN: //build/toolchain/linux:clang_arm

env-arm64: &env-arm64
  GCLIENT_EXTRA_ARGS: '--custom-var=checkout_arm64=True'
  GN_EXTRA_ARGS: 'target_cpu = "arm64" fatal_linker_warnings = false enable_linux_installer = false'
  MKSNAPSHOT_TOOLCHAIN: //build/toolchain/linux:clang_arm64

env-mas: &env-mas
  GN_EXTRA_ARGS: 'is_mas_build = true'

# Individual (shared) steps.
step-maybe-notify-slack-failure: &step-maybe-notify-slack-failure
  run:
    name: Send a Slack notification on failure
    command: |
      if [ "$NOTIFY_SLACK" == "true" ]; then
        export MESSAGE="Build failed for *<$CIRCLE_BUILD_URL|$CIRCLE_JOB>* nightly build."
        curl -g -H "Content-Type: application/json" -X POST \
        -d "{\"text\": \"$MESSAGE\", \"attachments\": [{\"color\": \"#FC5C3C\",\"title\": \"$CIRCLE_JOB nightly build results\",\"title_link\": \"$CIRCLE_BUILD_URL\"}]}" $SLACK_WEBHOOK
      fi
    when: on_fail

step-maybe-notify-slack-success: &step-maybe-notify-slack-success
  run:
    name: Send a Slack notification on success
    command: |
      if [ "$NOTIFY_SLACK" == "true" ]; then
        export MESSAGE="Build succeeded for *<$CIRCLE_BUILD_URL|$CIRCLE_JOB>* nightly build."
        curl -g -H "Content-Type: application/json" -X POST \
        -d "{\"text\": \"$MESSAGE\", \"attachments\": [{\"color\": \"good\",\"title\": \"$CIRCLE_JOB nightly build results\",\"title_link\": \"$CIRCLE_BUILD_URL\"}]}" $SLACK_WEBHOOK
      fi
    when: on_success

step-checkout-electron: &step-checkout-electron
  checkout:
    path: src/electron

step-depot-tools-get: &step-depot-tools-get
  run:
    name: Get depot tools
    command: |
      git clone --depth=1 https://chromium.googlesource.com/chromium/tools/depot_tools.git

step-depot-tools-add-to-path: &step-depot-tools-add-to-path
  run:
    name: Add depot tools to PATH
    command: echo 'export PATH="$PATH:'"$PWD"'/depot_tools"' >> $BASH_ENV

step-gclient-sync: &step-gclient-sync
  run:
    name: Gclient sync
    command: |
      gclient config \
        --name "src/electron" \
        --unmanaged \
        $GCLIENT_EXTRA_ARGS \
        "$CIRCLE_REPOSITORY_URL"

      gclient sync --with_branch_heads --with_tags

step-setup-env-for-build: &step-setup-env-for-build
  run:
    name: Setup Environment Variables
    command: |
      # To find `gn` executable.
      echo 'export CHROMIUM_BUILDTOOLS_PATH="'"$PWD"'/src/buildtools"' >> $BASH_ENV

      # https://github.com/mozilla/sccache
      SCCACHE_PATH="$PWD/src/electron/external_binaries/sccache"
      echo 'export SCCACHE_PATH="'"$SCCACHE_PATH"'"' >> $BASH_ENV

step-install-nodejs-on-mac: &step-install-nodejs-on-mac
  run:
    name: Install Node.js 10 on MacOS
    command: |
      if [ "`uname`" == "Darwin" ]; then
        brew update
        brew install node@10
      fi

step-electron-gn-gen: &step-electron-gn-gen
  run:
    name: Electron GN gen
    command: |
      cd src
      gn gen out/Default --args='import("'$GN_CONFIG'") cc_wrapper="'"$SCCACHE_PATH"'"'" $GN_EXTRA_ARGS"

step-electron-build: &step-electron-build
  run:
    name: Electron build
    command: |
      cd src
      ninja -C out/Default electron

step-electron-dist-build: &step-electron-dist-build
  run:
    name: Build dist.zip
    command: |
      cd src
      ninja -C out/Default electron:electron_dist_zip

step-electron-dist-store: &step-electron-dist-store
  store_artifacts:
    path: src/out/Default/dist.zip
    destination: dist.zip

step-electron-chromedriver-build: &step-electron-chromedriver-build
  run:
    name: Build chromedriver.zip
    command: |
      cd src
      ninja -C out/Default electron:electron_chromedriver_zip

step-electron-chromedriver-store: &step-electron-chromedriver-store
  store_artifacts:
    path: src/out/Default/chromedriver.zip
    destination: chromedriver.zip

step-nodejs-headers-build: &step-nodejs-headers-build
  run:
    name: Build Node.js headers
    command: |
      cd src
      ninja -C out/Default third_party/electron_node:headers

step-persist-data-for-tests: &step-persist-data-for-tests
  persist_to_workspace:
    root: .
    paths:
      # To run `gn args` for that dir from the "verify-ffmpeg" script.
      - src/out/Default/args.gn
      - src/out/Default/build.ninja

      # Build artifacts
      - src/out/Default/dist.zip
      - src/out/Default/gen/node_headers

step-electron-dist-unzip: &step-electron-dist-unzip
  run:
    name: Unzip dist.zip
    command: |
      cd src/out/Default
      # -o  overwrite files WITHOUT prompting
      # TODO(alexeykuzmin): Remove '-o' when it's no longer needed.
      unzip -o dist.zip

step-ffmpeg-gn-gen: &step-ffmpeg-gn-gen
  run:
    name: ffmpeg GN gen
    command: |
      cd src
      gn gen out/ffmpeg --args='import("//electron/build/args/ffmpeg.gn") cc_wrapper="'"$SCCACHE_PATH"'"'" $GN_EXTRA_ARGS"

step-ffmpeg-build: &step-ffmpeg-build
  run:
    name: Non proprietary ffmpeg build
    command: |
      cd src
      ninja -C out/ffmpeg third_party/ffmpeg

step-verify-ffmpeg: &step-verify-ffmpeg
  run:
    name: Verify ffmpeg
    command: |
      cd src
      python electron/script/verify-ffmpeg.py --source-root "$PWD" --build-dir out/Default --ffmpeg-path out/ffmpeg

step-setup-linux-for-headless-testing: &step-setup-linux-for-headless-testing
  run:
    name: Setup for headless testing
    command: |
      if [ "`uname`" != "Darwin" ]; then
        echo 'export DISPLAY=":99.0"' >> $BASH_ENV
        sh -e /etc/init.d/xvfb start
      fi

step-show-sccache-stats: &step-show-sccache-stats
  run:
    name: Check sccache stats after build
    command: $SCCACHE_PATH -s

step-mksnapshot-build: &step-mksnapshot-build
  run:
    name: mksnapshot build
    command: |
      cd src
      ninja -C out/Default electron:electron_mksnapshot_zip

step-mksnapshot-store: &step-mksnapshot-store
  store_artifacts:
    path: src/out/Default/mksnapshot.zip
    destination: mksnapshot.zip

# Lists of steps.
steps-checkout: &steps-checkout
  steps:
    - *step-checkout-electron
    - *step-depot-tools-get
    - *step-depot-tools-add-to-path

    - restore_cache:
        paths:
          - ~/.gclient-cache
        keys:
          - v1-gclient-cache-{{ arch }}-{{ checksum "src/electron/DEPS" }}
          - v1-gclient-cache-{{ arch }}-
    - run:
        name: Set GIT_CACHE_PATH to make gclient to use the cache
        command: |
          # CircleCI does not support interpolation when setting environment variables.
          # https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-shell-command
          echo 'export GIT_CACHE_PATH="$HOME/.gclient-cache"' >> $BASH_ENV
    - *step-gclient-sync
    - save_cache:
        paths:
          - ~/.gclient-cache
        key: v1-gclient-cache-{{ arch }}-{{ checksum "src/electron/DEPS" }}

    - run:
        name: Remove some unused data to avoid storing it in the workspace
        command: |
          rm -rf src/android_webview
          rm -rf src/ios
          rm -rf src/third_party/WebKit/LayoutTests
    - persist_to_workspace:
        root: .
        paths:
          - depot_tools
          - src

steps-electron-build: &steps-electron-build
  steps:
    - attach_workspace:
        at: .
    - *step-depot-tools-add-to-path
    - *step-setup-env-for-build

    # Electron app
    - *step-electron-gn-gen
    - *step-electron-build

    - *step-show-sccache-stats

steps-electron-build-for-tests: &steps-electron-build-for-tests
  steps:
    - attach_workspace:
        at: .
    - *step-depot-tools-add-to-path
    - *step-setup-env-for-build

    # Electron app
    - *step-electron-gn-gen
    - *step-electron-build
    - *step-electron-dist-build
    - *step-electron-dist-store

    # mksnapshot
    - *step-mksnapshot-build
    - *step-mksnapshot-store

    # chromedriver
    - *step-electron-chromedriver-build
    - *step-electron-chromedriver-store

    # Node.js headers
    - *step-nodejs-headers-build

    - *step-show-sccache-stats

    # Save all data needed for a further tests run.
    - *step-persist-data-for-tests

    - *step-maybe-notify-slack-failure
    - *step-maybe-notify-slack-success

steps-native-mksnapshot-build: &steps-native-mksnapshot-build
  steps:
    - attach_workspace:
        at: .
    - *step-depot-tools-add-to-path
    - *step-setup-env-for-build

    - run:
        name: native mksnapshot GN gen
        command: |
          cd src
          gn gen out/native_mksnapshot --args='import("//electron/build/args/native_mksnapshot.gn") cc_wrapper="'"$SCCACHE_PATH"'" v8_snapshot_toolchain="'"$MKSNAPSHOT_TOOLCHAIN"'"'" $GN_EXTRA_ARGS"
    - run:
        name: native mksnapshot (arm/arm64) build
        command: |
          cd src
          ninja -C out/native_mksnapshot electron:electron_mksnapshot_zip
          cp out/native_mksnapshot/mksnapshot.zip out/native_mksnapshot/native_mksnapshot.zip
    - store_artifacts:
        path: src/out/native_mksnapshot/native_mksnapshot.zip
        destination: native_mksnapshot.zip

steps-ffmpeg-build: &steps-ffmpeg-build
  steps:
    - attach_workspace:
        at: .
    - *step-depot-tools-add-to-path
    - *step-setup-env-for-build

    - *step-ffmpeg-gn-gen
    - *step-ffmpeg-build

    - store_artifacts:
        path: src/out/ffmpeg/libffmpeg.so
        destination: libffmpeg.so
    - persist_to_workspace:
        root: .
        paths:
          - src/out/ffmpeg/libffmpeg.so

steps-native-tests: &steps-native-tests
  steps:
    - attach_workspace:
        at: .
    - *step-depot-tools-add-to-path
    - *step-setup-env-for-build
    - *step-electron-gn-gen

    # This list is used to split tests across executors.
    - run:
        name: List tests
        command: |
          python src/electron/script/native-tests.py list \
            --config $TESTS_CONFIG > tests_list.txt

    # TODO(alexeykuzmin): Build only a subset of all tests.
    - run:
        name: Build tests
        command: |
          cd src
          ninja -C out/Default $BUILD_TARGET
    - *step-show-sccache-stats

    - *step-setup-linux-for-headless-testing
    - run:
        name: Run tests
        command: |
          mkdir test_results
          python src/electron/script/native-tests.py run \
            --config $TESTS_CONFIG \
            --tests-dir src/out/Default \
            --output-dir test_results \
            --binary $(circleci tests split tests_list.txt)

    - store_artifacts:
        path: test_results
        destination: test_results  # Put it in the root folder.
    - store_test_results:
        path: test_results

steps-verify-ffmpeg: &steps-verify-ffmpeg
  steps:
    - attach_workspace:
        at: .
    - *step-depot-tools-add-to-path
    - *step-electron-dist-unzip
    - *step-setup-linux-for-headless-testing

    - *step-verify-ffmpeg

steps-tests: &steps-tests
  steps:
    - attach_workspace:
        at: .
    - *step-depot-tools-add-to-path
    - *step-electron-dist-unzip
    - *step-setup-linux-for-headless-testing
    - *step-install-nodejs-on-mac

    - run:
        name: Run Electron tests
        environment:
          MOCHA_REPORTER: mocha-multi-reporters
          MOCHA_FILE: junit/test-results.xml
          MOCHA_MULTI_REPORTERS: mocha-junit-reporter, tap
          ELECTRON_DISABLE_SECURITY_WARNINGS: 1
        command: |
          cd src
          export ELECTRON_OUT_DIR=Default
          (cd electron && npm run test -- --ci --enable-logging)

    - store_test_results:
        path: src/junit

# Mac build are different in a few ways:
# 1. We can't use save_cache/restore_cache on Mac,
#   unpacking with `tar` fails with "Attempt to write to an empty file" error.
# 2. We don't use a shared checkout job because persist_to_workspace
#   and attach_workspace take too much time, more than the checkout itself.
steps-build-mac: &steps-build-mac
  steps:
    - *step-checkout-electron
    - *step-depot-tools-get
    - *step-depot-tools-add-to-path
    - *step-install-nodejs-on-mac
    - *step-gclient-sync
    - *step-setup-env-for-build

    # Electron app
    - *step-electron-gn-gen
    - *step-electron-build
    - *step-electron-dist-build
    - *step-electron-dist-store

    # mksnapshot
    - *step-mksnapshot-build
    - *step-mksnapshot-store

    # chromedriver
    - *step-electron-chromedriver-build
    - *step-electron-chromedriver-store

    # ffmpeg
    - *step-ffmpeg-gn-gen
    - *step-ffmpeg-build
    - store_artifacts:
        path: src/out/ffmpeg/libffmpeg.dylib
        destination: libffmpeg.dylib

    # It would be better to verify ffmpeg as a part of a test job,
    # but it requires `gn` to run, and it's complicated
    # to store all gn's dependencies and configs.
    - *step-verify-ffmpeg

    # Node.js headers for tests
    - *step-nodejs-headers-build

    - *step-show-sccache-stats

    - persist_to_workspace:
        root: .
        paths:
          - src/electron

    # Save all data needed for a further tests run.
    - *step-persist-data-for-tests

filter-only-prs-from-forks: &filter-only-prs-from-forks
  filters:
    branches:
      only: /^pull\/.*$/

# List of all jobs.
version: 2
jobs:
  # Layer 1: Checkout.
  linux-checkout:
    <<: *machine-linux-2xlarge
    <<: *steps-checkout

  linux-arm-checkout:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-arm
    <<: *steps-checkout

  linux-arm64-checkout:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-arm64
    <<: *steps-checkout

  # Layer 2: Builds.
  linux-x64-debug:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-debug-build
    <<: *steps-electron-build

  linux-x64-testing:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-testing-build
    <<: *steps-electron-build-for-tests

  linux-x64-ffmpeg:
    <<: *machine-linux-medium
    environment:
    <<: *steps-ffmpeg-build

  linux-x64-release:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-release-build
    <<: *steps-electron-build-for-tests

  linux-ia32-debug:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-ia32
      <<: *env-debug-build
    <<: *steps-electron-build

  linux-ia32-testing:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-ia32
      <<: *env-testing-build
    <<: *steps-electron-build-for-tests

  linux-ia32-ffmpeg:
    <<: *machine-linux-medium
    environment:
      <<: *env-ia32
    <<: *steps-ffmpeg-build

  linux-ia32-release:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-ia32
      <<: *env-release-build
    <<: *steps-electron-build-for-tests

  linux-arm-debug:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-arm
      <<: *env-debug-build
    <<: *steps-electron-build

  linux-arm-testing:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-arm
      <<: *env-testing-build
    <<: *steps-electron-build-for-tests

  linux-arm-ffmpeg:
    <<: *machine-linux-medium
    environment:
      <<: *env-arm
    <<: *steps-ffmpeg-build

  linux-arm-release:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-arm
      <<: *env-release-build
    <<: *steps-electron-build-for-tests

  linux-arm-mksnapshot:
    <<: *machine-linux-medium
    environment:
      <<: *env-arm
    <<: *steps-native-mksnapshot-build

  linux-arm64-debug:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-arm64
      <<: *env-debug-build
    <<: *steps-electron-build

  linux-arm64-testing:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-arm64
      <<: *env-testing-build
    <<: *steps-electron-build-for-tests

  linux-arm64-ffmpeg:
    <<: *machine-linux-medium
    environment:
      <<: *env-arm64
    <<: *steps-ffmpeg-build

  linux-arm64-release:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-arm64
      <<: *env-release-build
    <<: *steps-electron-build-for-tests

  linux-arm64-mksnapshot:
    <<: *machine-linux-medium
    environment:
      <<: *env-arm64
    <<: *steps-native-mksnapshot-build

  osx-testing:
    <<: *machine-mac
    environment:
      <<: *env-testing-build
    <<: *steps-build-mac

  mas-testing:
    <<: *machine-mac
    environment:
      <<: *env-mas
      <<: *env-testing-build
    <<: *steps-build-mac

  # Layer 3: Tests.
  linux-x64-unittests:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-testing-build
      <<: *env-unittests
    <<: *steps-native-tests
#    TODO(alexeykuzmin): Use parallelism.
#    parallelism: 4  # https://xkcd.com/221/

  linux-x64-browsertests:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-testing-build
      <<: *env-browsertests
    <<: *steps-native-tests

  linux-x64-testing-tests:
    <<: *machine-linux-medium
    <<: *steps-tests

  linux-x64-testing-verify-ffmpeg:
    <<: *machine-linux-medium
    <<: *steps-verify-ffmpeg

  linux-x64-release-tests:
    <<: *machine-linux-medium
    <<: *steps-tests

  linux-ia32-testing-tests:
    <<: *machine-linux-medium
    environment:
      <<: *env-ia32
    <<: *steps-tests

  linux-ia32-testing-verify-ffmpeg:
    <<: *machine-linux-medium
    environment:
      <<: *env-ia32
    <<: *steps-verify-ffmpeg

  linux-ia32-release-tests:
    <<: *machine-linux-medium
    environment:
      <<: *env-ia32
    <<: *steps-tests

  osx-testing-tests:
    <<: *machine-mac
    <<: *steps-tests

  mas-testing-tests:
    <<: *machine-mac
    <<: *steps-tests

workflows:
  version: 2
  build-linux:
    jobs:
      - linux-checkout
#      - linux-arm-checkout
#      - linux-arm64-checkout

      - linux-x64-unittests:
          requires:
            - linux-checkout
#
#      - linux-x64-debug:
#          requires:
#            - linux-checkout
#      - linux-x64-testing:
#          requires:
#            - linux-checkout
#      - linux-x64-testing-tests:
#          requires:
#            - linux-x64-testing
#      - linux-x64-ffmpeg:
#          requires:
#            - linux-checkout
#      - linux-x64-testing-verify-ffmpeg:
#          requires:
#            - linux-x64-testing
#            - linux-x64-ffmpeg
#
#      - linux-ia32-debug:
#          requires:
#            - linux-checkout
#      - linux-ia32-testing:
#          requires:
#            - linux-checkout
#      - linux-ia32-testing-tests:
#          requires:
#            - linux-ia32-testing
#      - linux-ia32-ffmpeg:
#          requires:
#            - linux-checkout
#      - linux-ia32-testing-verify-ffmpeg:
#          requires:
#            - linux-ia32-testing
#            - linux-ia32-ffmpeg
#
#      - linux-arm-debug:
#          requires:
#            - linux-arm-checkout
#      - linux-arm-testing:
#          requires:
#            - linux-arm-checkout
#      - linux-arm-ffmpeg:
#           requires:
#             - linux-arm-checkout
#      - linux-arm-mksnapshot:
#          requires:
#            - linux-arm-checkout
#
#      - linux-arm64-debug:
#          requires:
#            - linux-arm64-checkout
#      - linux-arm64-testing:
#          requires:
#            - linux-arm64-checkout
#      - linux-arm64-ffmpeg:
#           requires:
#             - linux-arm64-checkout
#      - linux-arm64-mksnapshot:
#          requires:
#            - linux-arm64-checkout

  build-mac-fork-prs:
    jobs:
      - osx-testing:
         <<: *filter-only-prs-from-forks
      - osx-testing-tests:
          <<: *filter-only-prs-from-forks
          requires:
            - osx-testing

      - mas-testing:
          <<: *filter-only-prs-from-forks
      - mas-testing-tests:
          <<: *filter-only-prs-from-forks
          requires:
            - mas-testing

  nightly-release-test:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
                - /chromium\-upgrade\/[0-9]+/
    jobs:
      - linux-checkout
      - linux-arm-checkout
      - linux-arm64-checkout

# TODO(alexeykuzmin): The only suite there fails to start, so skip
# the job for now. Fix the "content_browsertests" and enable the job back.
#      - linux-x64-browsertests:
#          requires:
#            - linux-checkout
      - linux-x64-unittests:
          requires:
            - linux-checkout

      - linux-x64-release:
          requires:
            - linux-checkout
      - linux-x64-release-tests:
          requires:
            - linux-x64-release

      - linux-ia32-release:
          requires:
            - linux-checkout
      - linux-ia32-release-tests:
          requires:
            - linux-ia32-release

      - linux-arm-release:
          requires:
            - linux-arm-checkout
      - linux-arm-mksnapshot:
          requires:
            - linux-arm-checkout

      - linux-arm64-release:
          requires:
            - linux-arm64-checkout
      - linux-arm64-mksnapshot:
          requires:
            - linux-arm64-checkout
